"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class NodeModulesBuilder {
    constructor($logger, $nodeModulesDependenciesBuilder, $pluginsService) {
        this.$logger = $logger;
        this.$nodeModulesDependenciesBuilder = $nodeModulesDependenciesBuilder;
        this.$pluginsService = $pluginsService;
    }
    prepareNodeModules(platformData, projectData) {
        return __awaiter(this, void 0, void 0, function* () {
            const dependencies = this.$nodeModulesDependenciesBuilder.getProductionDependencies(projectData.projectDir);
            if (_.isEmpty(dependencies)) {
                return;
            }
            yield platformData.platformProjectService.beforePrepareAllPlugins(projectData, dependencies);
            for (const dependencyKey in dependencies) {
                const dependency = dependencies[dependencyKey];
                const isPlugin = !!dependency.nativescript;
                if (isPlugin) {
                    this.$logger.debug(`Successfully prepared plugin ${dependency.name} for ${platformData.normalizedPlatformName.toLowerCase()}.`);
                    const pluginData = this.$pluginsService.convertToPluginData(dependency, projectData.projectDir);
                    yield this.$pluginsService.preparePluginNativeCode(pluginData, platformData.normalizedPlatformName.toLowerCase(), projectData);
                }
            }
        });
    }
}
exports.NodeModulesBuilder = NodeModulesBuilder;
$injector.register("nodeModulesBuilder", NodeModulesBuilder);
